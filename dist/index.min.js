var RuleEngine=function(r){"use strict";function t(r){return"object"==typeof r&&null!==r&&1===Object.keys(r).length&&Object.keys(r)[0].startsWith("$")}function e(r,t){if("string"==typeof r){const e=r.match(/^{{(.*?)}}$/);if(e){const r=e[1].trim(),n=r.split(".");let o=t;for(const t of n){if(null==o||!(t in o))throw new Error(`Path "${r}" does not exist in context.`);o=o[t]}return o}}return r}var n={$eq:function(r,n={}){if(!Array.isArray(r)||r.length<2)throw new Error("$eq operator expects an array with at least two elements.");const a=r.map((r=>t(r)?o(r,n):e(r,n))),i=a[0];return a.every((r=>r===i))},$gte:function(r,n={}){if(!Array.isArray(r)||2!==r.length)throw new Error("$gte operator expects an array with exactly two elements.");let[a,i]=r;return a=t(a)?o(a,n):e(a,n),i=t(i)?o(i,n):e(i,n),a>=i},$gt:function(r,t={}){if(!Array.isArray(r)||2!==r.length)throw new Error("$gt operator expects an array with exactly two elements.");const[n,o]=r.map((r=>e(r,t)));return n>o},$lt:function(r,t={}){if(!Array.isArray(r)||2!==r.length)throw new Error("$lt operator expects an array with exactly two elements.");const[n,o]=r.map((r=>e(r,t)));return n<o},$lte:function(r,t={}){if(!Array.isArray(r)||2!==r.length)throw new Error("$lte operator expects an array with exactly two elements.");const[n,o]=r.map((r=>e(r,t)));return n<=o},$ne:function(r,t={}){if(!Array.isArray(r)||r.length<2)throw new Error("$ne operator expects an array with at least two elements.");const n=r.map((r=>e(r,t))),o=n[0];return!n.every((r=>r===o))},$and:function(r,n={}){if(!Array.isArray(r))throw new Error("$and operator expects an array.");for(let a of r)if(t(a)){if(!o(a,n))return!1}else if(!e(a,n))return!1;return!0},$in:function(r,n={}){if(!Array.isArray(r)||2!==r.length)throw new Error("$in operator expects an array with exactly two elements.");let[a,i]=r;if(a=t(a)?o(a,n):e(a,n),i=t(i)?o(i,n):e(i,n),!Array.isArray(i))throw new Error("$in operator expects second argument to be an array.");return i.includes(a)},$or:function(r,n={}){if(!Array.isArray(r))throw new Error("$or operator expects an array.");for(let a of r)if(t(a)){if(o(a,n))return!0}else if(e(a,n))return!0;return!1}};function o(r,e){if(!t(r))return r;const[a,i]=Object.entries(r)[0],s=n[a];if(!s)throw new Error(`Unsupported operator: ${a}`);let c=i;return Array.isArray(i)?c=i.map((r=>o(r,e))):t(i)&&(c=o(i,e)),s(c,e)}return r.evaluateRules=function(r,t={}){Array.isArray(r)||(r=[r]);for(const e of r){if(o(e,t))return!0}return!1},Object.defineProperty(r,"__esModule",{value:!0}),r}({});
